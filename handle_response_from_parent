        
            HttpSM::init()                 ------> SET_HANDLER(&HttpSM::main_handler); 
            HttpSM::attach_server_session                                                           
                ua_entry->vc_handler = HttpSM::state_read_server_response_header;   -----+
                                                                                         |
                                                                                         v
                                                                                     jump_point = vc_handler                
   +----------------------------+
   |HttpSM::main_handler        |<--                                       +----------------+
   |    jump_point = vc_handler |   \-----                                 |default_handler |
   +----------------------------+         \-----                           +----------------+
                                                \-----                             ^
                                                      \-----                       |
                                                            \-----                 |?
HttpSM::set_next_state                                            \-----           |
    case HttpTransact::SERVER_PARSE_NEXT_HDR:                           \          |
    /                                                               +----------------------------------------------------------------------+
    \->  HttpSM::setup_server_read_response_header    ------------> | server_entry->vc_handler = &HttpSM::state_read_server_response_header|
            HttpSM::state_read_server_response_header               +----------------------------------------------------------------------+
                HttpSM::handle_server_setup_error          ***** [ t_state.current.state = ServerState_t ] 
                 |  t_state.current.state = HttpSM::ServerState_t[enum]
                 |                                     ^       
                 |                                      \      
                 |                                       \     
                 |                                        \ error   
                 |                                         \  
                 |                                          \ 
                 |                                            State.current.state
                 |                                                      ^
                 |                                                      |
                 |                                              handle_response_from_parent
                 |
                 |       
                 v
+--------------------------------------------------------------------------------------+             +--------------------------------------------------------------------------------+ 
| case VC_EVENT_EOS:                                                                   |             | /**                                                                            | 
|   t_state.current.state = HttpTransact::CONNECTION_CLOSED;                           |             |   No more data (end of stream). It should be interpreted by a                  | 
| case VC_EVENT_ERROR:                                                                 |             |   protocol engine as either a COMPLETE or ERROR.                               | 
|   t_state.current.state = HttpTransact::CONNECTION_ERROR;                            |------------>|                                                                                | 
| case VC_EVENT_ACTIVE_TIMEOUT:                                                        |             | */                                                                             | 
|   t_state.current.state = HttpTransact::ACTIVE_TIMEOUT;                              |             | #define VC_EVENT_EOS                     (VC_EVENT_EVENTS_START+4)             | 
|                                                                                      |             |                                                                                | 
| case VC_EVENT_INACTIVITY_TIMEOUT:                                                    |             | #define VC_EVENT_ERROR                   EVENT_ERROR                           | 
|   // If we're writing the request and get an inactivity timeout                      |             |                                                                                | 
|   //   before any bytes are written, the connection to the                           |             | /**                                                                            | 
|   //   server failed                                                                 |             |   VC_EVENT_INACTIVITY_TIMEOUT indiates that the operation (read or write) has: | 
|   // In case of TIMEOUT, the iocore sends back                                       |             |     -# been enabled for more than the inactivity timeout period                | 
|   // server_entry->read_vio instead of the write_vio                                 |             |        (for a read, there has been space in the buffer)                        | 
|   // if (vio->op == VIO::WRITE && vio->ndone == 0) {                                 |             |        (for a write, there has been data in the buffer)                        | 
|   if (server_entry->write_vio->nbytes > 0 && server_entry->write_vio->ndone == 0) {  |             |     -# no progress has been made                                               | 
|     t_state.current.state = HttpTransact::CONNECTION_ERROR;                          |             |        (for a read, no data has been read from the connection)                 | 
|   } else {                                                                           |             |        (for a write, no data has been written to the connection)               | 
|     t_state.current.state = HttpTransact::INACTIVE_TIMEOUT;                          |             |                                                                                | 
|   }                                                                                  |             | */                                                                             | 
+--------------------------------------------------------------------------------------+             | #define VC_EVENT_INACTIVITY_TIMEOUT      (VC_EVENT_EVENTS_START+5)             | 
                                                                                                     |                                                                                | 
                                                                                                     | /**                                                                            | 
                                                                                                     |   Total time for some operation has been exeeded, regardless of any            | 
                                                                                                     |   intermediate progress.                                                       | 
                                                                                                     |                                                                                | 
                                                                                                     | */                                                                             | 
                                                                                                     | #define VC_EVENT_ACTIVE_TIMEOUT          (VC_EVENT_EVENTS_START+6)             | 
                                                                                                     +--------------------------------------------------------------------------------+ 
